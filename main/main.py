from ast import BinOp
from datetime import datetime
from dis import Bytecode
from operator import xor
from random import randint
from datetime import datetime, timedelta
from sched import scheduler
from aiogram.dispatcher import FSMContext
from string import printable
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types

from database_class import Database
from wordlist import wordlist

printable = printable[0:-9]
printable.replace(" ", '')

MIN = 0
MAX = len(printable) - 1
API_TOKEN = '545'


bot = Bot(token='545')
dp = Dispatcher(bot, storage=MemoryStorage())
db = Database()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    check = db.insert_user(message["from"]["id"], message["from"]["first_name"])
    start_message = f"""
–ü—Ä–∏–≤–µ—Ç, *{message["from"]["username"]}* üòÄ
–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ *–ë–ï–ó–û–ü–ê–°–ù–´–ï* –ø–∞—Ä–æ–ª–∏ and –ø–∞—Ä–æ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª–∏–Ω–æ–π –æ—Ç 4 –¥–æ 256 –∏ –æ—Ç 4 –¥–æ 100 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ üîê
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É */help* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –ª–∏–±–æ –≤–∑–≥–ª—è–Ω–∏ –Ω–∞ "–º–µ–Ω—é"
"""

    await message.reply(start_message, parse_mode="Markdown")


@dp.message_handler(commands=['help'])
async def echo(message: types.Message):

    db.insert_user(message["from"]["id"], message["from"]["first_name"])

    help_message = f"""
*/start* - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
*/gen* - —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π –≤ 32 —Å–∏–º–≤–æ–ª–∞
*/gen num* - –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª–∏–Ω–æ–π –≤ —á–∏—Å–ª–æ —Å–∏–º–≤–æ–ª–æ–≤
*/gen 8*
*/gen 10*
*/gen 16*
*/gen 64*
üîë –ü–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /gen –æ—á–µ–Ω—å –Ω–∞–¥—ë–∂–Ω—ã, 
üí™ –ù–æ –∏—Ö —Å–ª–æ–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å. –£ –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –º—É–∂–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å –µ–≥–æ.
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å, –Ω–æ –±–æ–ª–µ–µ –ª—ë–≥–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É. –ü–∞—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ - —ç—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –ø–∞—Ä–æ–ª—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö `n` —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ.
–ü–∞—Ä–æ–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞: _absentee afternoon plus repackage long_
/phrase - –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã –¥–ª–∏–Ω–æ–π 8 —Å–ª–æ–≤
/phrase num - —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –∏–∑ num —Å–ª–æ–≤
–ü—Ä–∏–º–µ—Ä: 
*/phrase 4*
*/phrase 8*
*/phrase 12*
*/phrase 20*

*–ú–ê–õ–ï–ù–¨–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:*
----------------------
*/save* - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–ª–∏ –ø–∞—Ä–æ–ª–∏
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã, –∏ –Ω–∏–∫—Ç–æ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.
example:
/save _–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º —Å–µ–≥–æ–¥–Ω—è –≤ 12:30!_
/save _–ú–æ–π –ø—Ä–æ–ø—É—Å–∫ –≤ –∫–ª—É–±: DeDiNsIdE228_
---------------------
*/get* - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏

*–î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´:*
*/stat* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
*/gstat* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
*/dev* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–µ
    """

    await message.reply(help_message, parse_mode="Markdown")


@dp.message_handler(commands=['gen'])
async def gen(message: types.Message):

    length = message.text.replace("/gen", '').strip()

    try:
        if len(length) == 0:
            length = 16
        else:
            length = int(length)

        if 4 <= length <= 256:

            passwords = ""
            for _ in range(5):
                passwords += "\n\n" + (generate(length))

            db.increase_password_count(message["from"]["id"], 5)
            msg = f"""üîê –í–∞—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:
                {passwords[1:]}
                """
            await message.reply(msg)
        elif length <= 3:
                await message.reply("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π... ü§è")
        elif length > 256:
                await message.reply("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π... ü§•")
    except:
        await message.reply("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")


@dp.message_handler(commands=['phrase'])
async def phrase(message: types.Message):

    length = message.text.replace('/phrase', '').strip().replace(" ", '')

    try:
        if len(length) == 0:
            length = 8
        
        try:

            if length != 8:
    
                length = int(length)
            if 4 <= length <= 100:

                phrases = ""

                for _ in range(5):
                    phrase = ""
                    for _ in range(length):

                        phrase += " " + wordlist[randint(0,len(wordlist)-1)]

                    phrases += "\n\n" + phrase
                msg = f"""üëç –ö–æ–¥–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã:
                    {phrases[1:]}
                    """
                db.increase_passphrase_count(message["from"]["id"], 5)
                await message.reply(msg)

            elif length <= 3:
                await message.reply("–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π... ü§è")

            elif length > 100:
                await message.reply("–°–ª–∏–∫—à–æ–º –¥–ª–∏–Ω–Ω—ã–π... ü§•")
    
        except:
            await message.reply("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")
    
    except Exception as e:
        await message.reply("üìî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É")


@dp.message_handler(commands=['stats', 'stat', 'statistics'])
async def user_stat(message):

    stats = db.user_stat(message["from"]["id"])
    passwords_generated = stats[0]
    passphrases_generated = stats[1]
    msg = f"–¢—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª *{passwords_generated}* –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π üîê –∏ *{passphrases_generated}* üîê –ª—ë–≥–∫–∏—Ö –∫–æ–¥–æ–≤—ã—Ö —Ñ—Ä–∞–∑"
    
    del stats
    del passphrases_generated
    del passwords_generated

    await message.reply(msg, parse_mode="Markdown")


@dp.message_handler(commands=['gstats', 'gstat', 'gstatistics'])
async def global_stat(message):

    stats = db.global_stat()
    passwords_generated = stats[0]
    passphrases_generated = stats[1]

    msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ *{passwords_generated}* –Ω–∞–¥—ë–∂–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π üîê –∏ *{passphrases_generated}* üîê –ª—ë–≥–∫–∏—Ö –∫–æ–¥–æ–≤—ã—Ö —Ñ—Ä–∞–∑"
    
    del stats
    del passphrases_generated
    del passwords_generated
    
    await message.reply(msg, parse_mode="Markdown")


@dp.message_handler(commands=['dev', 'developer', 'builder'])
async def dev(message):
    
    msg = f"""–ü—Ä–∏–≤–µ—Ç, *{message["from"]["first_name"]}* üòÄ
    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–ª—å—è –∏ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ *Telegram* –¥–ª—è –∑–∞–∫–∞–∑–∞ –±–æ—Ç–∞/—Å–∞–π—Ç–∞/–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è @likemyasspls! –ê —Ç–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª (@NoLupi)
    –¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ: *github.com/NoLupiPls*
    """
    await message.reply(msg, parse_mode="Markdown")


@dp.message_handler(commands=['save'])
async def save_notes(message):
    msg = message["text"].replace('/save', '', 1).strip()
    if len(msg) > 0:


        db.save_notes(message["from"]["id"], msg, datetime.now().strftime("%y-%m-%d %H:%M:%S"))
        await message.reply("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    else:
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üòï")


@dp.message_handler(commands=['get'])
async def get_saved_notes(message):
    
    data = db.get_notes(message["from"]["id"])

    if len(data) > 0:
        msg = '''üìñ –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:'''
        for i in data:
            msg += "\n\n" + enc.decrypt_data(i[0])
        await message.reply(msg)
        del enc
    else:
        await message.reply("–í—ã –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ üòï")




class Wait(StatesGroup):
    lol = State()

@dp.message_handler(commands=['bin'], state='*')
async def bin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –¥–≤–æ–∏—á–Ω—ã–π –∫–æ–¥")
    await Wait.lol.set()
    
@dp.message_handler(state = Wait.lol)
async def pip_lol(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = str(data['text'])
    state.finish
    if len(message.text) > 124:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ–ª—å—à–µ 124 —Å–∏–º–≤–æ–ª–æ–≤ - –Ω–µ–ª—å–∑—è")
        return
    
    '''
    await message.reply("‚òë –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥—ë—Ç –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞...")
    async with state.proxy() as data:
        data['text'] = message.text
        user_message = str(data['text'])
    '''
    
    res = ''.join(format(ord(i), ' b') for i in user_message)
    #key = b'key'
    #xor(user_message.encode(), key)
    
    bad = res
    await message.answer('–í–æ—Ç —Ç–≤–æ–π –∫–æ–¥:\n' + bad)
    
        
    executor.return_polling(dp)
        
        
@dp.message_handler()
async def same_reply(message):
    db.insert_user(message["from"]["id"], message["from"]["first_name"])
    await message.reply(f"–•—ç–π, {message['from']['username']}, —è –Ω–µ –∑–Ω–∞—é –æ —á—ë–º —Ç—ã –≥–æ–≤–æ—Ä–∏—à—åüòÖ")


def generate(length):
    password = ""
    for _ in range(length):
        password += printable[randint(MIN, MAX)]
    return password
    
        
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
